There is a public bike service in Hangzhou City which provides great convenience to the tourists from all over the world.  One may rent a 
bike at any station and return it to any other stations in the city.
The Public Bike Management Center (PBMC) keeps monitoring the real-time capacity of all the stations.  A station is said to be in perfect 
condition if it is exactly half-full.  If a station is full or empty, PBMC will collect or send bikes to adjust the condition of that station 
to perfect.  And more, all the stations on the way will be adjusted as well. 
 When a problem station is reported, PBMC will always choose the shortest path to reach that station.  If there are more than one shortest 
 path, the one that requires the least number of bikes sent from PBMC will be chosen.



Figure 1

Figure 1 illustrates an example.  The stations are represented by vertices and the roads correspond to the edges.  The number on an edge is 
the time taken to reach one end station from another.  The number written inside a vertex S is the current number of bikes stored at S.  
Given that the maximum capacity of each station is 10.  To solve the problem at S3, we have 2 different shortest paths:
1. PBMC -> S1 -> S3.  In this case, 4 bikes must be sent from PBMC, because we can collect 1 bike from S1 and then take 5 bikes to S3, so that 
both stations will be in perfect conditions.
2. PBMC -> S2 -> S3.  This path requires the same time as path 1, but only 3 bikes sent from PBMC and hence is the one that will be chosen.

输入描述:
Each input file contains one test case.  For each case, the first line contains 4 numbers: Cmax (<= 100), always an even number, is the 
maximum capacity of each station; N (<= 500), the total number of stations; Sp, the index of the problem station (the stations are numbered 
from 1 to N, and PBMC is represented by the vertex 0); and M, the number of roads.  The second line contains N non-negative numbers Ci 
(i=1,...N) where each  Ci is the current number of bikes at Si respectively.  Then M lines follow, each contains 3 numbers: Si, Sj, and Tij 
which describe the time Tij taken to move betwen stations Si and Sj.  All the numbers in a line are separated by a space.


输出描述:
For each test case, print your results in one line.  First output the number of bikes that PBMC must send.  Then after one space, output 
the path in the format: 0->S1->...->Sp.  Finally after another space, output the number of bikes that we must take back to PBMC after the
condition of Sp is adjusted to perfect.
Note that if such a path is not unique, output the one that requires minimum number of bikes that we must take back to PBMC.  The judge's 
data guarantee that such a path is unique.

输入例子:
10 3 3 5
6 7 0
0 1 1
0 2 1
0 3 3
1 3 1
2 3 1

输出例子:
3 0->2->3 0

题目翻译：

	    杭州市现在有一种公共的共享单车服务，它为来自世界各地的游客提供了极大的方便。你可以在任何一个站点租一辆单车，也可以在任何一个站点还车。
	共享单车的公共管理中心（PBMC）一直会监视监视所有站点的实时容量。一个站点如果是半满的情况是最好的，但是如果一个站点的车停满了或者这个站点是
  空的，PBMC将会收集或者发送该站点的自行车来调整这个站点的停车情况。总之，线路上的其它站点也都会被调整。当一个站点的情况被报到PBMC这里的时
  候，PBMC会选择最近的路径去该站点。如果到达该站点的最短路径不止一条，PBMC将会选择处理单车数量最少的一条路径
 
  该图阐述了一个示例。车站是由顶点代替的，道路则由线条代替，线条上的数字是线条两边站点互达的时间。顶点Sx里面的数字是该站点目前的存放的
  单车数量。由于每个站点最大的容量是10辆单车。为了解决S3中的问题，我们有两条最近的路径去解决它。
1.PMBC —> S1 —> S3.这种情况下，必须从PBMC发送4辆单车，因为我们可以从S1收集一辆单车，然后我们带着5辆单车达到S3，以达到所有的车站都是理想的状态。
2.PMBC —> S2 —>S3.这种情况下，这条路径跟第一条路径是一样的，但是我们只需要从PBMC发送三辆单车，
所以方案2作为最终方案。

输入描述：
	每一个输入的文件包含一个测试用例。对于每种情况，第一行包含4个数字 ：Cmax (<= 100)，必须为一个偶数，它代表着一个站点的最大容量；
  N (<= 500)，代表着站点的数量；Sp(p代表车站的索引，可取1-N，PBMC由0表示)，需要调整的车站的数量；M，马路的条数。第二行包含了N个非负数数字，
  Ci (i=1,…N)，Ci表示Si站点里面目前停放的单车数量。接下来还有M行的数字需要输入，每一行包含三个数字：Si，Sj，和Tij，Tij表示了Si站点到Sj站点
  所需要的时间，所有输入的数字之间用一个空格分隔开。
	
输出描述：
	出你的路径：: 0->S1->...->Sp。最后再跟着一个空格之后，输出我们需要从Sp站点调整的单车数量。
如果此类路径有多条，那么输出你需要调整单车数最少的一条。必须保证这条路的唯一性。

输入例子:
10 3 3 5
6 7 0
0 1 1
0 2 1
0 3 3
1 3 1
2 3 1

输出例子:
3 0->2->3 0


题目解答代码：
#include<iostream>
#include<fstream>
#include<vector>
using namespace std;
#define MAX 505
#define INF 10000

int cap,N,sp,M;
int vex;
int dist[MAX][MAX];
int bike[MAX];
#define PF cap/2

vector<int> curpath;
vector<int> shortpath;
int minsend=INF,minback=INF;
int minlen=INF;
int cursend=0,curback=0;
int curlen=0;
bool visit[MAX]={0};

void dfs(int cur){
    if(curlen>minlen)
        return;
    if(cur==sp){
        //到达目标点，看是否最优
        if(curlen<minlen){
            minlen=curlen;
            minsend=cursend;
            minback=curback;
            shortpath=curpath;
        }
        else if(curlen==minlen){
            if(cursend<minsend||(cursend==minsend&&curback<minback)){
                minsend=cursend;
                minback=curback;
                shortpath=curpath;
            }
        }
        return;
    }
    for(int i=1;i<vex;i++){
        if(visit[i]==true||dist[cur][i]==INF)
            continue;
        int lastsend=cursend;
        int lastback=curback;
                //计算到达当前点的send和back数
        if(bike[i]+curback<PF){
            cursend+=PF-bike[i]-curback;
            curback=0;
        }
        else{
            curback=bike[i]+curback-PF;
        }
        visit[i]=true;
        curpath.push_back(i);
        curlen+=dist[cur][i];
        dfs(i);
        curpath.pop_back();
        visit[i]=false;
        curlen-=dist[cur][i];
        cursend=lastsend;
        curback=lastback;
    }
}
int main(){
    cin>>cap>>N>>sp>>M;
    //初始化，输入第一行数字
    vex=N+1;
    for(int i=0;i<vex;i++){
        for(int j=0;j<vex;j++){
            dist[i][j]=dist[j][i]=INF;
        }
    }
    
    for(int i=1;i<vex;i++){
        cin>>bike[i];//输入第二行数字，站点单车的数量
    }
    for(int k=0;k<M;k++){
        int i,j;
        cin>>i>>j;  //输入路径
        cin>>dist[i][j];  //输入走该路径的时间
        dist[j][i]=dist[i][j];
    }
    
    dfs(0);
    
    printf("%d 0",minsend);     //输出需要从PBMC调动的单车数量
    for(int i=0;i<shortpath.size();i++){
        printf("->%d",shortpath[i]);
    }      //输出调动单车的路径
    printf(" %d",minback);    //输出需要从Sp站点调的单车数量
    return 0;
}
